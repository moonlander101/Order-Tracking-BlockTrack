services:
  blocktrack-backend:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: blocktrack-backend
    ports:
      - "8000:8000"
    restart: always
    volumes:
      - ".:/app/"
    # command: /bin/sh -c "cd /app/blocktrack_backend && gunicorn blocktrack_backend.wsgi:application --bind 0.0.0.0:8000"
    command : /bin/sh -c "cd /app/blocktrack_backend && python manage.py runserver 0.0.0.0:8000"
    # command: /bin/sh -c "cd /app/blocktrack_backend && tail -f /dev/null"
    environment:
      PYTHONUNBUFFERED: 1
    env_file:
      - .env
    networks:
      - scms
  
  blocktrack-consumer:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: blocktrack-consumer
    restart: always
    volumes:
      - ".:/app/"
    command: /bin/sh -c "cd /app/blocktrack_backend && python manage.py consume_messages"
    depends_on:
      - blocktrack-postgres
    environment:
      KAFKA_BROKER_URL: kafka:9092
    networks:
      - scms

  blocktrack-postgres:
    image: postgres:15
    container_name: blocktrack-postgres
    restart: always
    environment:
      POSTGRES_USER: blockuser
      POSTGRES_PASSWORD: blockpass
      POSTGRES_DB: blocktrack_db
    ports:
      - "15433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - scms
  
  adminer:
    image: adminer
    container_name: blocktrack_adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - blocktrack-postgres
    networks:
      - scms
volumes:
  postgres_data:


networks:
  scms:
    external: true
    name: scms-network